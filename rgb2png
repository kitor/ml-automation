#!/usr/bin/env python3

import os
import argparse

import PIL.Image


def main():
    args = parse_args()

    with open(args.file, "rb") as f:
        data = list(f.read())

    data = data[args.offset :]

    num_bytes = len(data)
    width = args.width
    height = num_bytes // (width * 4)
    print("Computed height: {}".format(height))

    # pad the end so we always have at least w * h bytes
    data.extend([0] * (width * 4))

    img = PIL.Image.new("RGBA", (width, height), "white")
    pixels = img.load()  # Create the pixel map
    for y in range(height):
        for x in range(0, width):
            B = data[(y * width * 4) + x * 4 + 0]
            G = data[(y * width * 4) + x * 4 + 1]
            R = data[(y * width * 4) + x * 4 + 2]
            A = data[(y * width * 4) + x * 4 + 3]
            pixels[x, y] = (R, G, B, A)

    if args.crop:
        off_x = (width - args.c_width) / 2
        off_y = (height - args.c_height) / 2
        img = img.crop((off_x, off_y, off_x + args.c_width, off_y + args.c_height))
    img.save("{}.png".format(os.path.basename(args.file)))


def parse_args():
    description = """ Util for displaying binary data as bitmap.
    """

    parser = argparse.ArgumentParser(description=description)

    parser.add_argument("file", default="RGB_0000.bin", help="Input file path")
    parser.add_argument(
        "-w",
        "--width",
        default=960,
        type=int,
        help="Width of output, default: %(default)s",
    )
    parser.add_argument(
        "-o", "--offset", default=0, type=int, help="Offset in input file."
    )
    parser.add_argument("--crop", action="store_true", help="Crop center 720x480")
    parser.add_argument("--c_width", default=720, type=int, help="Crop width.")
    parser.add_argument("--c_height", default=480, type=int, help="Crop height.")

    args = parser.parse_args()
    if not os.path.isfile(args.file):
        print("File not found: {}".format(file))
        exit(1)

    return args


if __name__ == "__main__":
    main()
